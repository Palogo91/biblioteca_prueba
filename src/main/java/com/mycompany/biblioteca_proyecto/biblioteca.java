/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.biblioteca_proyecto;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import static java.time.LocalDateTime.now;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Paloma Lobo
 */
public class biblioteca extends javax.swing.JFrame {

    public static DefaultTableModel tabla1;
    public static DefaultTableModel tabla2;
    public static int filaSeleccionada;

    public static void crearfecha() {
        Format formatter = new SimpleDateFormat("dd-MM-yyyy");
        String s = formatter.format(new java.util.Date());
        jTextField5.setText("FECHA " + s);
        jTextField4.setText("FECHA " + s);
        jTextField3.setText("FECHA " + s);
        jTextField2.setText("FECHA " + s);
        jTextField1.setText("FECHA " + s);
    }

    public biblioteca() {
        initComponents();
        prepararTabla();
        crearfecha();

    }

    public void prepararTabla() {
        //PARA LA TABLA USUARIOS
        String titulosUsuarios[] = {"NOMBRE", "APELLIDOS", "DNI", "DOMICILIO", "TELFONO"};
        tabla1 = new DefaultTableModel(null, titulosUsuarios);
        jTable1.setModel(tabla1);

        //PARA LA TABLA DE LIBROS
        String titulosLibros[] = {"ID", "TITULO", "AUTOR", "DISPONIBLES"};
        tabla2 = new DefaultTableModel(null, titulosLibros);
        jTable2.setModel(tabla2);

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3308/biblioteca", "root", "");
            System.out.println("Conectado");

            String query = "Select * from Usuarios";//Usuarios es el nombre de la tabla

            Statement stmt = con.createStatement();//Crea un objeto para establecer la conexion
            ResultSet rs = stmt.executeQuery(query);// Establece la consulta y almacena los datos en rs
            tabla1.setRowCount(0);//Borra todas las filas de la tabla
            while (rs.next()) {
                String nombre = rs.getString("nombre");
                String apellidos = rs.getString("apellidos");
                String dni = rs.getString("dni");
                String domicilio = rs.getString("domicilio");
                String telefono = rs.getString("telefono");
                tabla1.addRow(new Object[]{nombre, apellidos, dni, domicilio, telefono});
            }

            rs.close();
            stmt.close();
            con.close();
        } catch (Exception ex) {
            System.out.println("No conectado. Error: ");
            ex.printStackTrace();
        }

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3308/biblioteca", "root", "");
            System.out.println("Conectado");

            String query2 = "Select * from libros";//libros es el nombre de la tabla

            Statement stmt = con.createStatement();//Crea un objeto para establecer la conexion
            ResultSet rs = stmt.executeQuery(query2);// Establece la consulta y almacena los datos en rs
            tabla2.setRowCount(0);//Borra todas las filas de la tabla
            while (rs.next()) {
                String id_libro = rs.getString("id_libro");
                String nombre_libro = rs.getString("nombre_libro");
                String autor = rs.getString("autor");
                String Disponible = rs.getString("Disponible");

                tabla2.addRow(new Object[]{id_libro, nombre_libro, autor, Disponible});
            }

            rs.close();
            stmt.close();
            con.close();
        } catch (Exception ex) {
            System.out.println("No conectado. Error: ");
            ex.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JTabbedPane();
        Principal = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jTextField5 = new javax.swing.JTextField();
        Prestamos = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dniUsuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        idLibro = new javax.swing.JTextField();
        prestar = new javax.swing.JButton();
        Devoluciones = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dniUsuarioD = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        idLibroD = new javax.swing.JTextField();
        devolver1 = new javax.swing.JButton();
        Usuarios = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        nuevo = new javax.swing.JButton();
        javax.swing.JButton editar = new javax.swing.JButton();
        borrar = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        Libros = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        a√±adirLirbro = new javax.swing.JButton();
        editarLibro = new javax.swing.JButton();
        borrarLibro = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelPrincipal.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        Principal.setAlignmentX(2.0F);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTextField5.setText("FECHA Y HORA");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(157, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout PrincipalLayout = new javax.swing.GroupLayout(Principal);
        Principal.setLayout(PrincipalLayout);
        PrincipalLayout.setHorizontalGroup(
            PrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PrincipalLayout.setVerticalGroup(
            PrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PrincipalLayout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPrincipal.addTab("Principal", Principal);

        jTextField4.setText("FECHA Y HORA");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 570, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(130, 130, 130)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(130, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(28, 28, 28)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(29, Short.MAX_VALUE)))
        );

        jLabel1.setText("Ingrese el DNI del usuario:");

        jLabel2.setText("Ingrese el ID del libro:");

        prestar.setText("PRESTAR");
        prestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prestarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dniUsuario)
                            .addComponent(idLibro, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(prestar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dniUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(idLibro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addComponent(prestar)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout PrestamosLayout = new javax.swing.GroupLayout(Prestamos);
        Prestamos.setLayout(PrestamosLayout);
        PrestamosLayout.setHorizontalGroup(
            PrestamosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PrestamosLayout.createSequentialGroup()
                .addGroup(PrestamosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PrestamosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PrestamosLayout.setVerticalGroup(
            PrestamosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PrestamosLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPrincipal.addTab("Prestamos", Prestamos);

        jTextField3.setText("FECHA Y HORA");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 570, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(130, 130, 130)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(130, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(28, 28, 28)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(29, Short.MAX_VALUE)))
        );

        jLabel3.setText("Ingrese el DNI del usuario:");

        jLabel4.setText("Ingrese el ID del libro:");

        devolver1.setText("DEVOLVER");
        devolver1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devolver1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DevolucionesLayout = new javax.swing.GroupLayout(Devoluciones);
        Devoluciones.setLayout(DevolucionesLayout);
        DevolucionesLayout.setHorizontalGroup(
            DevolucionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DevolucionesLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DevolucionesLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(DevolucionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(DevolucionesLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(dniUsuarioD))
                    .addGroup(DevolucionesLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(idLibroD, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
                .addGap(134, 134, 134))
            .addGroup(DevolucionesLayout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(devolver1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DevolucionesLayout.setVerticalGroup(
            DevolucionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DevolucionesLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(DevolucionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dniUsuarioD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(DevolucionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(idLibroD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(devolver1)
                .addGap(76, 76, 76))
        );

        panelPrincipal.addTab("Devoluciones", Devoluciones);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        nuevo.setText("NUEVO");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });

        editar.setText("EDITAR");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        borrar.setText("BORRAR");
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        jTextField2.setText("FECHA Y HORA");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editar, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(borrar, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(111, 111, 111))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevo)
                    .addComponent(editar)
                    .addComponent(borrar))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout UsuariosLayout = new javax.swing.GroupLayout(Usuarios);
        Usuarios.setLayout(UsuariosLayout);
        UsuariosLayout.setHorizontalGroup(
            UsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        UsuariosLayout.setVerticalGroup(
            UsuariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        panelPrincipal.addTab("Usuarios", Usuarios);

        jTextField1.setText("FECHA Y HORA");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        a√±adirLirbro.setText("A√ëADIR");
        a√±adirLirbro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a√±adirLirbroActionPerformed(evt);
            }
        });

        editarLibro.setText("EDITAR");
        editarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarLibroActionPerformed(evt);
            }
        });

        borrarLibro.setText("BORRAR");
        borrarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarLibroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(a√±adirLirbro)
                        .addGap(79, 79, 79)
                        .addComponent(editarLibro)
                        .addGap(87, 87, 87)
                        .addComponent(borrarLibro))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(a√±adirLirbro)
                    .addComponent(editarLibro)
                    .addComponent(borrarLibro))
                .addContainerGap(86, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout LibrosLayout = new javax.swing.GroupLayout(Libros);
        Libros.setLayout(LibrosLayout);
        LibrosLayout.setHorizontalGroup(
            LibrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LibrosLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        LibrosLayout.setVerticalGroup(
            LibrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LibrosLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPrincipal.addTab("Libros", Libros);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        crearfecha();
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        crearfecha();
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        NewJDialog nd = new NewJDialog(null, true);//si pongo true solo puedo interactuar con el jdialog
        nd.setLocationRelativeTo(null);//esto para centrar el jdialog
        nd.setVisible(true);


    }//GEN-LAST:event_nuevoActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        NewJDialog1 nd1 = new NewJDialog1(null, true);
        nd1.setLocationRelativeTo(null);

        filaSeleccionada = jTable1.getSelectedRow();

        if (filaSeleccionada >= 0) {

            NewJDialog1.jTextField6.setText((String) (tabla1.getValueAt(filaSeleccionada, 0)));
            NewJDialog1.jTextField7.setText((String) (tabla1.getValueAt(filaSeleccionada, 1)));
            NewJDialog1.jTextField8.setText((String) (tabla1.getValueAt(filaSeleccionada, 2)));
            NewJDialog1.jTextField9.setText((String) (tabla1.getValueAt(filaSeleccionada, 3)));
            NewJDialog1.jTextField10.setText((String) (tabla1.getValueAt(filaSeleccionada, 4)));

            nd1.setVisible(true);

        } else {
            JOptionPane.showConfirmDialog(null, "Seleccione una fila");
        }


    }//GEN-LAST:event_editarActionPerformed

    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        filaSeleccionada = jTable1.getSelectedRow(); //esto me devuelve la fila que yo selecciono y la guardo en esta variable
        String nombre = (String) tabla1.getValueAt(filaSeleccionada, 0);
        String apellidos = (String) tabla1.getValueAt(filaSeleccionada, 1);
        if (filaSeleccionada >= 0) {
            if (JOptionPane.showConfirmDialog(null, "¬øDesea borrar esta fila?",
                    "Atencion", JOptionPane.YES_NO_OPTION) == 0) {
                tabla1.removeRow(filaSeleccionada);

                try {
                    Class.forName("com.mysql.cj.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3308/biblioteca", "root", "");
                    System.out.println("Conectado");
                    //Crear una sentencia de eliminacion de SQL
                    String deleteQuery = "DELETE FROM usuarios WHERE nombre=? AND apellidos=?";
                    //Preparar la sentencia
                    PreparedStatement preparedStatement = con.prepareStatement(deleteQuery);
                    preparedStatement.setString(1, nombre);
                    preparedStatement.setString(2, apellidos);
                    //Ejecuto la sentencia
                    int rowCount = preparedStatement.executeUpdate();
                    //Cerrar la conexion y liberar recursos
                    preparedStatement.close();
                    con.close();
                    System.out.println("Filas afectadas por la eliminacion: " + rowCount);

                } catch (Exception ex) {
                    System.out.println("No conectado o error al eliminar los datos: ");
                    ex.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una fila",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_borrarActionPerformed

    private void a√±adirLirbroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a√±adirLirbroActionPerformed
        NewJDialog2 nd2 = new NewJDialog2(null, true);//si pongo true solo puedo interactuar con el jdialog
        nd2.setLocationRelativeTo(null);//esto para centrar el jdialog
        nd2.setVisible(true);
    }//GEN-LAST:event_a√±adirLirbroActionPerformed

    private void editarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarLibroActionPerformed
        NewJDialog3 nd3 = new NewJDialog3(null, true);
        nd3.setLocationRelativeTo(null);

        filaSeleccionada = jTable2.getSelectedRow();

        if (filaSeleccionada >= 0) {

            NewJDialog3.jTextField1.setText((String) (tabla2.getValueAt(filaSeleccionada, 0)));
            NewJDialog3.jTextField2.setText((String) (tabla2.getValueAt(filaSeleccionada, 1)));
            NewJDialog3.jTextField3.setText((String) (tabla2.getValueAt(filaSeleccionada, 2)));

            nd3.setVisible(true);

        } else {
            JOptionPane.showConfirmDialog(null, "Seleccione una fila");
        }

    }//GEN-LAST:event_editarLibroActionPerformed


    private void prestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prestarActionPerformed
        String dni_usuario = dniUsuario.getText();
        String id_libro = idLibro.getText();
        String fechaInicio;
        String fechaActual = LocalDate.now().toString();
        String sancionFecha;
       

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3308/biblioteca", "root", "");

            if (con != null) {
                System.out.println("Conectado");

                // Consultar si el usuario existe
                String queryUsuario = "SELECT * FROM usuarios WHERE dni = ?";
                PreparedStatement stmtUsuario = con.prepareStatement(queryUsuario);
                stmtUsuario.setString(1, dni_usuario);
                ResultSet resultadoUsuario = stmtUsuario.executeQuery();

                if (resultadoUsuario.next()) {
                    // Consulta si el usuario tiene fecha de sanci√≥n
                    String queryFechaSancion = "SELECT Fecha_sancion FROM usuarios WHERE dni = ?";
                    PreparedStatement stmtFechaSancion = con.prepareStatement(queryFechaSancion);
                    stmtFechaSancion.setString(1, dni_usuario);
                    ResultSet fechas = stmtFechaSancion.executeQuery();

                    if (fechas.next()) {
                        sancionFecha = fechas.getString("Fecha_sancion");
                        if (sancionFecha != null && !sancionFecha.isEmpty()) {
                            LocalDate fechaSancion = LocalDate.parse(sancionFecha);
                            LocalDate fechaActualDate = LocalDate.parse(fechaActual);
                            long dias = ChronoUnit.DAYS.between(fechaSancion, fechaActualDate);

                            if (dias <= 14) {
                                JOptionPane.showMessageDialog(null, "No podr√° adquirir libro hasta que no pasen dos semanas desde la fecha de la sanci√≥n");
                                return;
                            }
                        }
                    }

                    // Consultar si el libro existe y est√° disponible
                    String queryLibro = "SELECT * FROM libros WHERE id_libro = ?";
                    PreparedStatement stmtLibro = con.prepareStatement(queryLibro);
                    stmtLibro.setString(1, id_libro);
                    ResultSet resultadoLibro = stmtLibro.executeQuery();

                    if (resultadoLibro.next()) {
                        int disponible = resultadoLibro.getInt("Disponible");
                        if (disponible > 0) {
                            // Prestar el libro y restar 1 a la disponibilidad
                            String actualizarLibro = "UPDATE libros SET Disponible = Disponible - 1 WHERE id_libro = ?";
                            PreparedStatement stmtActualizarLibro = con.prepareStatement(actualizarLibro);
                            stmtActualizarLibro.setString(1, id_libro);
                            stmtActualizarLibro.executeUpdate();
                            
                            String actualizarSancion="UPDATE usuarios SET Fecha_sancion = NULL WHERE dni = ?";
                            PreparedStatement stmtActualizarSancion=con.prepareStatement(actualizarSancion);                         
                            stmtActualizarSancion.setString(1, dni_usuario);
                            stmtActualizarSancion.execute();

                            // Pasar el usuario, el libro y la fecha a la tabla prestamos
                            fechaInicio = LocalDate.now().toString();
                            String prestamo = "INSERT INTO prestamos (Usuario, Libro, `Fecha Prestamo`) VALUES (?, ?, ?)";
                            PreparedStatement stmtActualizaPrestamo = con.prepareStatement(prestamo);
                            stmtActualizaPrestamo.setString(1, dni_usuario);
                            stmtActualizaPrestamo.setString(2, id_libro);
                            stmtActualizaPrestamo.setString(3, fechaInicio);
                            stmtActualizaPrestamo.execute();

                            JOptionPane.showMessageDialog(null, "Libro prestado con √©xito");
                        } else {
                            JOptionPane.showMessageDialog(null, "El libro no est√° disponible.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "El libro no existe.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El usuario no existe.");
                }

                con.close();
            }
        } catch (Exception ex) {
            System.out.println("No conectado o error al modificar los datos: ");
            ex.printStackTrace();
        }
    



    }//GEN-LAST:event_prestarActionPerformed

	    private void borrarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarLibroActionPerformed
                filaSeleccionada = jTable2.getSelectedRow(); //esto me devuelve la fila que yo selecciono y la guardo en esta variable
                String id_libro = (String) tabla2.getValueAt(filaSeleccionada, 0);
                String nombre_libro = (String) tabla2.getValueAt(filaSeleccionada, 1);

                if (filaSeleccionada >= 0) {
                    if (JOptionPane.showConfirmDialog(null, "¬øDesea borrar este libro?",
                            "Atencion", JOptionPane.YES_NO_OPTION) == 0) {
                        tabla2.removeRow(filaSeleccionada);

                        try {
                            Class.forName("com.mysql.cj.jdbc.Driver");
                            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3308/biblioteca", "root", "");
                            System.out.println("Conectado");
                            //Crear una sentencia de eliminacion de SQL
                            String deleteQuery = "DELETE FROM libros WHERE id_libro=? AND nombre_libro=?";
                            //Preparar la sentencia
                            PreparedStatement preparedStatement = con.prepareStatement(deleteQuery);
                            preparedStatement.setString(1, id_libro);
                            preparedStatement.setString(2, nombre_libro);

                            //Ejecuto la sentencia
                            int rowCount = preparedStatement.executeUpdate();
                            //Cerrar la conexion y liberar recursos
                            preparedStatement.close();
                            con.close();
                            System.out.println("Filas afectadas por la eliminacion: " + rowCount);

                        } catch (Exception ex) {
                            System.out.println("No conectado o error al eliminar los datos: ");
                            ex.printStackTrace();
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Seleccione una fila",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_borrarLibroActionPerformed

    private void devolver1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devolver1ActionPerformed

        String dniUsuario = dniUsuarioD.getText();
        String idLibro = idLibroD.getText();
        String fechaDevolucion = LocalDate.now().toString();
        String fechaPrestamo = "";
        String sancion1="20‚Ç¨";

        //lo primero leer de la base de datos el usuario por su dni si existe continua y sino error
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3308/biblioteca", "root", "");

            if (con != null) {
                System.out.println("Conectado");

                // Consultar si el usuario existe
                String queryUsuario = "SELECT * FROM prestamos WHERE Usuario = ?";
                PreparedStatement stmtUsuario = con.prepareStatement(queryUsuario);
                stmtUsuario.setString(1, dniUsuario);
                ResultSet resultadoUsuario = stmtUsuario.executeQuery();

                if (resultadoUsuario.next()) {
                    // Consultar si el libro existe 
                    String queryLibro = "SELECT * FROM prestamos WHERE Usuario = ? AND Libro = ?";
                    //Preparo la consulta
                    PreparedStatement stmtLibro = con.prepareStatement(queryLibro);
                    //Le damos valor al primer parametro con el id_libro
                    stmtLibro.setString(1, dniUsuario);
                    stmtLibro.setString(2, idLibro);
                    //Ejecuto la consulta
                    ResultSet resultadoLibro = stmtLibro.executeQuery();

                    if (resultadoLibro.next()) {

                        // Devolver el libro y sumar 1 a la disponibilidad
                        String actualizarLibro = "UPDATE libros SET Disponible = Disponible + 1 WHERE id_libro = ?";
                        PreparedStatement stmtActualizarLibro = con.prepareStatement(actualizarLibro);
                        stmtActualizarLibro.setString(1, idLibro);
                        stmtActualizarLibro.executeUpdate();

                        //Poner la fecha de devolucion en la tabla prestamos
                        String devolucion = "UPDATE prestamos SET `Fecha Devolucion` = ? WHERE Usuario = ? AND Libro = ?";
                        PreparedStatement stmtDevolverLibro = con.prepareStatement(devolucion);
                        stmtDevolverLibro.setString(1, fechaDevolucion);
                        stmtDevolverLibro.setString(2, dniUsuario);
                        stmtDevolverLibro.setString(3, idLibro);
                        stmtDevolverLibro.execute();

                        //Coger la fecha del prestamo
                        String prestamo = "SELECT `Fecha Prestamo` FROM prestamos WHERE Usuario=? AND Libro=?";
                        PreparedStatement stmtprestamo = con.prepareStatement(prestamo);
                        stmtprestamo.setString(1, dniUsuario);
                        stmtprestamo.setString(2, idLibro);

                        ResultSet fechaP = stmtprestamo.executeQuery();
                        if (fechaP.next()) {
                            fechaPrestamo = fechaP.getString("Fecha Prestamo");
                        }

                        //Pasamos las fechas a localdate para poder restarlas
                        LocalDate fecha1 = LocalDate.parse(fechaPrestamo);
                        LocalDate fecha2 = LocalDate.parse(fechaDevolucion);

                        //Restamos
                        int dias = fecha2.getDayOfMonth() - fecha1.getDayOfMonth();

                        if (dias <= 3) {
                            JOptionPane.showMessageDialog(null, "Libro devuelto con exito");
                        } else {
                            String sancion = "UPDATE Prestamos SET Sancion=? WHERE Usuario=? AND Libro=? ";
                            PreparedStatement stmtSancion = con.prepareStatement(sancion);
                            stmtSancion.setString(1, sancion1);
                            stmtSancion.setString(2, dniUsuario);
                            stmtSancion.setString(3, idLibro);
                            stmtSancion.execute();
                            String usuarioSancionado="UPDATE usuarios SET Fecha_sancion=? WHERE dni=?";
                            PreparedStatement stmtUsuarioSancion=con.prepareStatement(usuarioSancionado);
                            stmtUsuarioSancion.setString(1, fechaDevolucion);
                            stmtUsuarioSancion.setString(2, dniUsuario);
                            stmtUsuarioSancion.execute();
                            JOptionPane.showMessageDialog(null, "Sancion por devolucion de libro fuera de plazo");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "El libro no existe.");

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El usuario no existe.");

                }

                con.close();
            }

        } catch (Exception ex) {
            System.out.println("No conectado o error al modificar los datos: ");
            ex.printStackTrace();
        }


    }//GEN-LAST:event_devolver1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(biblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(biblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(biblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(biblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new biblioteca().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Devoluciones;
    private javax.swing.JPanel Libros;
    private javax.swing.JPanel Prestamos;
    private javax.swing.JPanel Principal;
    private javax.swing.JPanel Usuarios;
    private javax.swing.JButton a√±adirLirbro;
    private javax.swing.JButton borrar;
    private javax.swing.JButton borrarLibro;
    private javax.swing.JButton devolver1;
    public static javax.swing.JTextField dniUsuario;
    private javax.swing.JTextField dniUsuarioD;
    private javax.swing.JButton editarLibro;
    public static javax.swing.JTextField idLibro;
    private javax.swing.JTextField idLibroD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JScrollPane jScrollPane6;
    public static javax.swing.JTable jTable1;
    public static javax.swing.JTable jTable2;
    public static javax.swing.JTextField jTextField1;
    public static javax.swing.JTextField jTextField2;
    public static javax.swing.JTextField jTextField3;
    public static javax.swing.JTextField jTextField4;
    public static javax.swing.JTextField jTextField5;
    private javax.swing.JButton nuevo;
    private javax.swing.JTabbedPane panelPrincipal;
    public static javax.swing.JButton prestar;
    // End of variables declaration//GEN-END:variables
}
